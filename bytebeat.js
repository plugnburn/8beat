// Generated by CoffeeScript 1.9.0
(function() {
  var aud, audLoad, beat, gBI, qS, qSA;

  beat = function(b, e, a, t) {
    return (a = 'data') + ':audio/wav;base64,UklGRl9fX19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgA' + btoa(eval("with(Math)for(t=0;++t<e*8e3;)a+=String.fromCharCode(255&(" + b + "))"));
  };

  aud = new Audio();

  qS = function(s) {
    return document.querySelector(s);
  };

  qSA = function(s) {
    return document.querySelectorAll(s);
  };

  gBI = function(i) {
    return document.getElementById(i);
  };

  audLoad = function(expr, time) {
    return aud.src = beat(expr, time);
  };

  addEventListener('DOMContentLoaded', function() {
    var bbData, bbParts, el, expr, time, _i, _len, _ref;
    aud.addEventListener('ended', function(e) {
      aud.currentTime = 0;
      return gBI('playpause').innerHTML = 'Play';
    });
    _ref = qSA('#playpause');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      el.addEventListener('click', function(e) {
        var exel, expr, tel, time;
        if (aud.paused) {
          exel = gBI('expr');
          tel = gBI('duration');
          expr = exel.value;
          time = parseInt(tel.value);
          if (expr && time) {
            audLoad(expr, time);
            aud.play();
            return el.innerHTML = 'Stop';
          } else {
            if (!expr) {
              exel.focus();
            }
            if (!time) {
              return tel.focus();
            }
          }
        } else {
          aud.pause();
          aud.currentTime = 0;
          return el.innerHTML = 'Play';
        }
      }, false);
    }
    addEventListener('input', function(e) {
      var expr, time;
      time = parseInt(gBI('duration').value);
      expr = gBI('expr').value;
      return location.hash = time && expr ? encodeURIComponent(time + "::" + expr) : '';
    });
    if (location.hash.length > 1) {
      bbData = decodeURIComponent(location.hash.substr(1));
      bbParts = bbData.split('::');
      if (bbParts.length > 1) {
        time = bbParts[0];
        expr = bbParts[1];
        gBI('duration').value = time;
        gBI('expr').value = expr;
        return audLoad(expr, time);
      }
    }
  }, false);

}).call(this);
